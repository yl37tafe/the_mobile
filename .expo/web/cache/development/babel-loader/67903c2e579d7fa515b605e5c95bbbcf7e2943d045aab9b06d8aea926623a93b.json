{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { infoMessage } from \"../utils/flashMessage\";\nimport Settings from \"../constants/Settings\";\nimport { RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { RoiDeletePerson } from \"../utils/Api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showAddPerson() {\n    props.navigation.navigate('Root', {\n      screen: \"AddPerson\"\n    });\n  }\n  function showViewPerson(person) {\n    props.navigation.navigate('ViewPerson', {\n      id: person.id\n    });\n  }\n  function showEditPerson(person) {\n    props.navigation.navigate('EditPerson', {\n      id: person.id\n    });\n  }\n  function deletePerson(person) {\n    PopupOkCancel(\"Delete person?\", `Are you sure you want to delete ${person.name}?`, function () {\n      RoiDeletePerson(person.id).then(function (data) {\n        PopupOk(\"Person deleted\", `${person.name} has been deleted`);\n        refreshPersonList();\n      }).catch(function (error) {\n        PopupOk(\"Error\", error);\n      });\n    }, function () {});\n  }\n  function displayConnectionMessage() {\n    console.log('displayConnectionMessage');\n    NetInfo.fetch().then(function (status) {\n      if (status.isConnected) {\n        console.log('here');\n        infoMessage('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\n      }\n    });\n  }\n  function displayPeople() {\n    displayConnectionMessage();\n    if (!people) return;\n    return people.map(function (p) {\n      return _jsxs(View, {\n        style: Styles.personListItem,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            style: Styles.personListItemName,\n            children: p.name\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: p.department ? p.department.name : \"---\"\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: p.phone\n          })]\n        }), _jsxs(View, {\n          style: Styles.personListItemButtons,\n          children: [_jsx(MyButton, {\n            text: \"Info\",\n            type: \"major\",\n            size: \"small\",\n            onPress: function onPress() {\n              showViewPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            onPress: function onPress() {\n              showEditPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            onPress: function onPress() {\n              deletePerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        style: Styles.personList,\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","SafeAreaView","NetInfo","infoMessage","Settings","RoiGetPeople","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextH2","Styles","MyButton","RoiDeletePerson","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","showAddPerson","navigation","navigate","screen","showViewPerson","person","id","showEditPerson","deletePerson","name","displayConnectionMessage","fetch","status","isConnected","displayPeople","map","p","style","personListItem","children","personListItemDetails","personListItemName","personListItemText","department","phone","personListItemButtons","text","type","size","onPress","buttonStyle","personListItemButton","textStyle","personListItemButtonText","safeAreaView","personButtonContainer","container","contentContainerStyle","contentContainer","marginTop","personList"],"sources":["C:/yuan/the_mobile/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\r\nimport { View, ScrollView } from 'react-native';\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\nimport { infoMessage  } from '../utils/flashMessage';\r\n\r\n// Import helper code\r\nimport Settings from '../constants/Settings';\r\nimport { RoiGetPeople } from '../utils/RoiApi';\r\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\r\n\r\n// Import styling and components\r\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\r\nimport Styles from \"../styles/MainStyle\";\r\nimport { MyButton } from '../components/MyButton';\r\nimport { RoiDeletePerson } from '../utils/Api';\r\n\r\n\r\nexport default function ViewPeopleScreen(props) {\r\n\r\n  // State - data for this component\r\n\r\n  // Data array, default to empty array\r\n  const [people, setPeople] = React.useState([])\r\n\r\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\r\n  // \"effectful\" code is something that triggers a UI re-render\r\n  React.useEffect(refreshPersonList, [])\r\n\r\n  // Refresh the person list data - call the API\r\n  function refreshPersonList() {\r\n\r\n    console.log(\"refresh person list\")\r\n\r\n    // Get data from the API\r\n    RoiGetPeople()\r\n      // Success\r\n      .then(data => {\r\n        // Store results in state variable\r\n        setPeople(data)\r\n      })\r\n      // Error\r\n      .catch(error => {\r\n        PopupOk(\"API Error\", \"Could not get people from the server\")\r\n      })\r\n\r\n  }\r\n\r\n  function showAddPerson() {\r\n    \r\n    props.navigation.navigate('Root', {screen: \"AddPerson\"});\r\n\r\n  }\r\n\r\n  function showViewPerson(person) {\r\n    \r\n    props.navigation.navigate('ViewPerson', {id: person.id});\r\n\r\n  }\r\n\r\n  function showEditPerson(person) {\r\n    \r\n    props.navigation.navigate('EditPerson', {id: person.id});\r\n\r\n  }\r\n\r\n  function deletePerson(person){\r\n\r\n    PopupOkCancel(\r\n\r\n      \"Delete person?\",\r\n\r\n      `Are you sure you want to delete ${person.name}?`,\r\n      \r\n      () => {\r\n        RoiDeletePerson(person.id)\r\n          .then(data => {\r\n            PopupOk(\"Person deleted\", `${person.name} has been deleted`)\r\n            refreshPersonList()\r\n          })\r\n\r\n          .catch(error => {\r\n            PopupOk(\"Error\", error)\r\n          })\r\n      },\r\n\r\n      () => {}\r\n\r\n    )\r\n  }\r\n\r\n  function displayConnectionMessage() {\r\n    console.log('displayConnectionMessage');\r\n    // Get network connection status\r\n    NetInfo.fetch().then((status) => {\r\n      // Check if not connected to the Internet\r\n      if (status.isConnected) {\r\n        // Display the flash message\r\n        console.log('here');\r\n        infoMessage ('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\r\n      }\r\n    });\r\n  }\r\n\r\n  // Display all people data\r\n  function displayPeople() {\r\n\r\n    displayConnectionMessage()\r\n\r\n    if (!people) return\r\n    \r\n    // Loop through each item and turn into appropriate output and then return the result\r\n    return people.map(p => {\r\n\r\n      // Create an output view for each item\r\n      return (\r\n        <View key={p.id} style = {Styles.personListItem}>\r\n          <View style = {Styles.personListItemDetails}>\r\n            <TextParagraph style = {Styles.personListItemName}>{p.name}</TextParagraph>\r\n            <TextParagraph style = {Styles.personListItemText}>{p.department ? p.department.name : \"---\"}</TextParagraph>\r\n            <TextParagraph style = {Styles.personListItemText}>{p.phone}</TextParagraph>\r\n          </View>\r\n          <View style = {Styles.personListItemButtons}>\r\n            <MyButton\r\n              text=\"Info\"\r\n              type=\"major\"\r\n              size=\"small\"\r\n              onPress={() => {showViewPerson(p)}}\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n            />\r\n            <MyButton\r\n              text=\"Edit\"\r\n              type=\"default\"\r\n              size=\"small\"\r\n              onPress={() => {showEditPerson(p)}}\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n            />\r\n            <MyButton\r\n              text=\"Delete\"\r\n              type=\"minor\"\r\n              size=\"small\" \r\n              onPress={() => {deletePerson(p)}}\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n            />\r\n          </View>\r\n        </View>\r\n      )\r\n\r\n    })\r\n    \r\n  }\r\n\r\n\r\n  // Main output of the screen component\r\n  return (\r\n    <SafeAreaView style={Styles.safeAreaView}>\r\n      \r\n      <View style={Styles.personButtonContainer}>\r\n        <MyButton \r\n          text=\"+ Add new person\"\r\n          type=\"major\"      // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={showAddPerson}\r\n        />\r\n        <MyButton \r\n          text=\"Refresh\"\r\n          type=\"default\"    // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={refreshPersonList}\r\n        />\r\n      </View>\r\n      \r\n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\r\n          \r\n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\r\n\r\n        <View style = {Styles.personList}>\r\n          {displayPeople()}\r\n        </View>\r\n\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}